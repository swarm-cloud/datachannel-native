// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-macos10.13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name datachannel_wrapper
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import datachannel_wrapper
@_hasMissingDesignatedInitializers public class DCLibDC {
  public class func version() -> Swift.String
  public class func rtcIceServer(url: Swift.String? = nil, hostname: Swift.String = "", port: Swift.Int16 = 0, type: datachannel_wrapper.DCIceServerType = DCIceServerType.stun, username: Swift.String = "", password: Swift.String = "", relayType: datachannel_wrapper.DCIceServerRelayType = DCIceServerRelayType.turnTcp) -> datachannel_wrapper.DCIceServer
  public class func rtcConfiguration(iceServers: [datachannel_wrapper.DCIceServer] = [], proxyServer: datachannel_wrapper.DCProxyServer? = nil, bindAddress: Swift.String? = nil, certificateType: datachannel_wrapper.DCCertificateType = DCCertificateType.default, iceTransportPolicy: datachannel_wrapper.DCTransportPolicy = DCTransportPolicy.all, enableIceTcp: Swift.Bool = false, enableIceUdpMux: Swift.Bool = false, disableAutoNegotiation: Swift.Bool = false, forceMediaTransport: Swift.Bool = false, portRangeBegin: Swift.Int32 = 1024, portRangeEnd: Swift.Int32 = 65535, mtu: Foundation.NSNumber? = nil, maxMessageSize: Foundation.NSNumber? = nil) -> datachannel_wrapper.DCConfiguration
  @objc deinit
}
extension datachannel_wrapper.DCPeerConnection {
  public class func initLogger(_ level: datachannel_wrapper.DCLogLevel, callback: @escaping (_ level: datachannel_wrapper.DCLogLevel, _ message: Swift.String) -> ())
  public func onLocalDescription(_ callback: @escaping (_ sdp: Swift.String) -> ())
  public func onLocalCandidate(_ callback: @escaping (_ candidate: Swift.String, _ mid: Swift.String) -> ())
  public func onDataChannel(_ callback: @escaping (_ dc: datachannel_wrapper.DCDataChannel?) -> ())
  public func onStateChange(_ callback: @escaping (_ state: datachannel_wrapper.DCIceState) -> ())
  public func onGatheringStateChange(_ callback: @escaping (_ state: datachannel_wrapper.DCGatheringState) -> ())
  public func onSignalingStateChange(_ callback: @escaping (_ state: datachannel_wrapper.DCSignalingState) -> ())
  public func createDataChannel(_ label: Swift.String, _ conf: datachannel_wrapper.DCDataChannelInit? = nil) -> datachannel_wrapper.DCDataChannel?
}
extension datachannel_wrapper.DCDataChannel {
  public func onOpen(_ callback: @escaping (_ event: datachannel_wrapper.DCDcEvent) -> ())
  public func onClosed(_ callback: @escaping (_ event: datachannel_wrapper.DCDcEvent) -> ())
  public func onError(_ callback: @escaping (_ error: Swift.String) -> ())
  public func onMessage(text: @escaping (_ msg: Swift.String) -> (), binary: @escaping (_ msg: Foundation.Data) -> ())
  public func onBufferedAmountLow(_ callback: @escaping (_ event: datachannel_wrapper.DCDcEvent) -> ())
}
